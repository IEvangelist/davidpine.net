<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0">
  <channel>
    <title>.NET on David Pine</title>
    <link>http://localhost:1313/categories/.net/</link>
    <description>Recent content in .NET on David Pine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploring .NET streaming API scenarios</title>
      <link>http://localhost:1313/blog/dotnet-async-enumerable/</link>
      <pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/dotnet-async-enumerable/</guid>
      <description>‚ùó IMPORTANT The featured image was generated using bing.com/create powered by DALL¬∑E. Exploring .NET streaming API scenarios If you&amp;rsquo;re a .NET developer, chances are you&amp;rsquo;re already familiar with the IAsyncEnumerable&amp;lt;T&amp;gt; interface. This interface was introduced in .NET Core 3.0 and is used to asynchronously iterate over a collection of data. This is a great way to stream data from a server to a client. In this post, you&amp;rsquo;ll learn how to:</description>
      <media:content url="http://localhost:1313/img/2023/06/streaming-apis.png" medium="image" />
      <dc:creator>David Pine</dc:creator>
    </item>
    
    <item>
      <title>A conversation with ChatGPT </title>
      <link>http://localhost:1313/blog/dotnet-dependency-injection/</link>
      <pubDate>Thu, 08 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/dotnet-dependency-injection/</guid>
      <description>‚ùó IMPORTANT This post was generated using ChatGPT. I prompted the AI with a few leading questions and formatted the responses as the body text of this post. For more information, see the ChatGPT. A conversation with ChatGPT about .NET Dependency Injection What is dependency injection and why is it important?
David Pine Dependency injection is a software design pattern that allows a programmer to remove hard-coded dependencies and make them configurable.</description>
      <media:content url="http://localhost:1313/img/2022/12/chatgpt-conversation.png" medium="image" />
      <dc:creator>David Pine</dc:creator>
    </item>
    
    <item>
      <title>Hello from the GitHub Actions: Core .NET SDK</title>
      <link>http://localhost:1313/blog/github-actions-sdk/</link>
      <pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/github-actions-sdk/</guid>
      <description>üì¢ ATTENTION This post is part of the C# advent calendar 2022, for other articles in this collection see C# Advent Calendar 2022. This is the third time I&amp;rsquo;ve written for the calendar, past entries include 2017: C# Special Edition and 2018: C# All The Things. üôèüèΩ GitHub Actions: Core .NET SDK SDKs are great, but why do we need one for GitHub Actions? The short answer is, you don&amp;rsquo;t!</description>
      <media:content url="http://localhost:1313/img/2022/11/dotnet-github-sdk.png" medium="image" />
      <dc:creator>David Pine</dc:creator>
    </item>
    
    <item>
      <title>C# Special Edition</title>
      <link>http://localhost:1313/blog/csharp-special-edition/</link>
      <pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/csharp-special-edition/</guid>
      <description>Welcome to the 17th day of the C# Advent Calendar . I&amp;rsquo;d like to take a moment to thank my fellow bloggers who are sharing their passion of C# with everyone following the C# Advent Calendar. Please, share this and their posts - help us all make C# even more widely adopted than it is today.
In the Beginning I&amp;rsquo;m honored to blog about my favorite programming language, C#. There is an often forgotten truth about the history of C#, one truth that I like talking about.</description>
      <media:content url="http://localhost:1313/img/2017/12/keyboard.jpg" medium="image" />
      <dc:creator>David Pine</dc:creator>
    </item>
    
    <item>
      <title>Demystifying .NET Standard</title>
      <link>http://localhost:1313/blog/dot-net-standard-demystified/</link>
      <pubDate>Wed, 16 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/dot-net-standard-demystified/</guid>
      <description>Intro Monday, August 14th was an amazing day to be a .NET developer! As the world celebrates another triumphant series of announcements from Microsoft, there is still confusion amongst the masses.
What is this .NET Standard thing? What does it mean to target .NET Standard versus .NET Core, or even the .NET Framework? As a developer, what .NET should I target and why? Are Portable Class Libraries (PCLs) dead? Developer Community</description>
      <media:content url="http://localhost:1313/img/2017/08/confused.jpg" medium="image" />
      <dc:creator>David Pine</dc:creator>
    </item>
    
    <item>
      <title>Perusing C# 7.1</title>
      <link>http://localhost:1313/blog/csharp-seven-dot-one/</link>
      <pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/csharp-seven-dot-one/</guid>
      <description>Earlier this year in March &amp;ndash; Visual Studio 2017 was released. With this the world was given C# 7, checkout my post on Exploring C# 7. In this post we will peruse C# 7.1, the first incremental release while C# 8 is being fleshed out.
Async Main Since the release of C# 5, developers have either embraced the async and await keywords or fumbled along the way feebly attempting to comprehend them.</description>
      <media:content url="http://localhost:1313/img/2017/07/peruse.jpg" medium="image" />
      <dc:creator>David Pine</dc:creator>
    </item>
    
    <item>
      <title>Exploring C# 7</title>
      <link>http://localhost:1313/blog/exploring-csharp-seven/</link>
      <pubDate>Sun, 26 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/exploring-csharp-seven/</guid>
      <description>Intro Since we have all been actively celebrating the 20th anniversary of Visual Studio, it felt appropriate to post about C# 7! In this post we will explore the features that make C# 7 so promising. I&amp;rsquo;ve put together a demonstration C# 7 project, that is available here .
This post contains examples and details on five of the nine new C# 7 features.
Pattern matching out variables Tuples Local functions throw expressions These are the remaining features, that I do not cover in this post.</description>
      <media:content url="http://localhost:1313/img/2017/03/exploration.png" medium="image" />
      <dc:creator>David Pine</dc:creator>
    </item>
    
  </channel>
</rss>